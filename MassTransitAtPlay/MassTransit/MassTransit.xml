<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MassTransit</name>
    </assembly>
    <members>
        <member name="T:MassTransit.AllowMessageTypeAttribute">
            <summary>
            Specifies a message type that can be added to a MessageGroup
            </summary>
        </member>
        <member name="T:MassTransit.ExpiresInAttribute">
            <summary>
            Specifies the elapsed time before a message expires. When a message expires, the content is no longer
            // important and it can be automatically discarded by the message service.
            </summary>
        </member>
        <member name="M:MassTransit.ExpiresInAttribute.#ctor(System.String)">
            <summary>
            Specifies the elapsed time before the message expires.
            </summary>
            <param name="timeToLive">The duration of the time period.</param>
        </member>
        <member name="P:MassTransit.ExpiresInAttribute.TimeToLive">
            <summary>
            Returns the TimeSpan for the message expiration
            </summary>
        </member>
        <member name="T:MassTransit.Fault`1">
            <summary>
            A fault is a system-generated message that is published when an exception occurs while processing a message.
            </summary>
            <typeparam name="TMessage">The type of message that threw the exception</typeparam>
        </member>
        <member name="M:MassTransit.Fault`1.#ctor(`0,System.Exception)">
            <summary>
            Creates a new fault message for the failed message
            </summary>
            <param name="ex">The exception thrown by the message consumer</param>
            <param name="message">The message that was being processed when the exception was thrown</param>
        </member>
        <member name="P:MassTransit.Fault`1.OccurredAt">
            <summary>
            When the exception occurred
            </summary>
        </member>
        <member name="P:MassTransit.Fault`1.Messages">
            <summary>
            Messages associated with the exception
            </summary>
        </member>
        <member name="P:MassTransit.Fault`1.StackTrace">
            <summary>
            A stack trace related to the exception
            </summary>
        </member>
        <member name="P:MassTransit.Fault`1.FailedMessage">
            <summary>
            The message that failed to be consumed
            </summary>
        </member>
        <member name="P:MassTransit.Fault`1.CaughtException">
            <summary>
            The exception that was caught
            </summary>
        </member>
        <member name="T:MassTransit.Fault`2">
            <summary>
            A fault is a system-generated message that is published when an exception occurs while processing a message.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:MassTransit.CorrelatedBy`1">
            <summary>
            Used to identify a message as correlated so that the CorrelationId can be returned
            </summary>
            <typeparam name="TKey">The type of the CorrelationId used</typeparam>
        </member>
        <member name="P:MassTransit.CorrelatedBy`1.CorrelationId">
            <summary>
            Returns the CorrelationId for the message
            </summary>
        </member>
        <member name="M:MassTransit.Fault`2.#ctor(`0,System.Exception)">
            <summary>
            Creates a new Fault message for the failed correlated message
            </summary>
            <param name="ex"></param>
            <param name="message"></param>
        </member>
        <member name="T:MassTransit.IConsumer">
            <summary>
            Marker interface used to assist identification in IoC containers.
            Not to be used directly.
            </summary>
            <remarks>
            Not to be used directly by application code. Is an internal artifact only.
            </remarks>
        </member>
        <member name="T:MassTransit.Parallel.IDistributedTask`3">
            <summary>
            Required by a class that performs a distributed task
            </summary>
            <typeparam name="TTask">The type of the DistributedTask</typeparam>
            <typeparam name="TInput">The input class for the subtask</typeparam>
            <typeparam name="TOutput">The output class for the subtask</typeparam>
        </member>
        <member name="M:MassTransit.Parallel.IDistributedTask`3.GetSubTaskInput(System.Int32)">
            <summary>
            Returns the input for the SubTask
            </summary>
            <param name="subTaskId">The identifier for the SubTask</param>
            <returns>The input class for the SubTask</returns>
        </member>
        <member name="M:MassTransit.Parallel.IDistributedTask`3.DeliverSubTaskOutput(System.Int32,`2)">
            <summary>
            Delivers the output from a SubTask to the DistributedTask
            </summary>
            <param name="subTaskId">The identifier for the SubTask</param>
            <param name="output">The output data from processing the SubTask</param>
        </member>
        <member name="M:MassTransit.Parallel.IDistributedTask`3.NotifySubTaskException(System.Int32,System.Exception)">
            <summary>
            Notify the DistributedTask that an exception occurred in a worker
            </summary>
            <param name="subTaskId">The identifier for the SubTask</param>
            <param name="ex">The exception that was caught</param>
        </member>
        <member name="M:MassTransit.Parallel.IDistributedTask`3.WhenCompleted(System.Action{`0})">
            <summary>
            Specifies a delegate to be called when the DistributedTask has completed
            </summary>
            <param name="action"></param>
        </member>
        <member name="P:MassTransit.Parallel.IDistributedTask`3.SubTaskCount">
            <summary>
            Returns the number of SubTasks in the DistributedTask
            </summary>
        </member>
        <member name="T:MassTransit.Saga.ISagaRepository`1">
            <summary>
            A saga repository is used by the service bus to dispatch messages to sagas
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.IEndpoint">
            <summary>
            IEndpoint is implemented by an endpoint. An endpoint is an addressable location on the network.
            </summary>
        </member>
        <member name="M:MassTransit.IEndpoint.Send``1(``0)">
            <summary>
            Send to the endpoint
            </summary>
            <typeparam name="T">The type of the message to send</typeparam>
            <param name="message">The message to send</param>
        </member>
        <member name="M:MassTransit.IEndpoint.Receive(System.Func{System.Object,System.Action{System.Object}})">
            <summary>
            Receive from the endpoint by passing a function that can preview the message and if the caller
            chooses to accept it, return a method that will consume the message.
            
            Returns immediately if no message is available.
            </summary>
            <param name="receiver">The function to preview/consume the message</param>
        </member>
        <member name="M:MassTransit.IEndpoint.Receive(System.Func{System.Object,System.Action{System.Object}},System.TimeSpan)">
            <summary>
            Receive from the endpoint by passing a function that can preview the message and if the caller
            chooses to accept it, return a method that will consume the message.
            
            Returns after the specified timeout if no message is available.
            </summary>
            <param name="receiver">The function to preview/consume the message</param>
            <param name="timeout">The time to wait for a message to be available</param>
        </member>
        <member name="P:MassTransit.IEndpoint.Address">
            <summary>
            The address of the endpoint
            </summary>
        </member>
        <member name="P:MassTransit.IEndpoint.Uri">
            <summary>
            The URI of the endpoint
            </summary>
        </member>
        <member name="T:MassTransit.Saga.ISaga">
            <summary>
            Defines a component as a saga
            </summary>
        </member>
        <member name="T:MassTransit.Saga.Orchestrates`1">
            <summary>
            Specifies that a class implementing ISaga consumes TMessage as part of the saga
            </summary>
            <typeparam name="TMessage">The type of message to consume</typeparam>
        </member>
        <member name="T:MassTransit.Saga.InitiatedBy`1">
            <summary>
            Specifies that the message type TMessage starts a new saga. 
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.MessageGroup">
            <summary>
            A message group allows a set of messages to be sent as a single message to a single consumer with the intent
            that the messages will be processed as a single unit of work.
            </summary>
        </member>
        <member name="M:MassTransit.MessageGroup.#ctor(System.Collections.Generic.List{System.Object})">
            <summary>
            Creates a message group with the specified list of messages. This class is normally built by the <c>MessageGroupBuilder</c>
            </summary>
            <param name="messages">The messages included in the group</param>
        </member>
        <member name="M:MassTransit.MessageGroup.Build``1">
            <summary>
            Returns a builder for the message group of type <typeparamref name="TGroup"/>
            </summary>
            <typeparam name="TGroup">The type of message group to be built</typeparam>
            <returns>A message builder for <typeparamref name="TGroup"/></returns>
        </member>
        <member name="M:MassTransit.MessageGroup.Join``1(System.Object[])">
            <summary>
            Builds a list of the messages specified and returns a message group for the messages
            </summary>
            <param name="items">The messages to store in the message group</param>
            <returns>A standard message group</returns>
        </member>
        <member name="P:MassTransit.MessageGroup.Count">
            <summary>
            The number of messages in the message group.
            </summary>
        </member>
        <member name="P:MassTransit.MessageGroup.Item(System.Int32)">
            <summary>
            Returns the message from the group at the specified index
            </summary>
            <param name="index">The index of the message to return</param>
            <returns>The message at the specified index</returns>
        </member>
        <member name="T:MassTransit.MessageGroupBuilder`1">
            <summary>
            Prepares the contents of a message group in order to create the class of the specified type.
            </summary>
            <typeparam name="TBuilder">The type of class to create for the message group</typeparam>
        </member>
        <member name="M:MassTransit.MessageGroupBuilder`1.Add(System.Object)">
            <summary>
            Adds a message to the message group
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.MessageGroupBuilder`1.op_Implicit(MassTransit.MessageGroupBuilder{`0})~`0">
            <summary>
            Converts the <c>MessageGroupBuilder</c> into a new instance of type <c>TBuilder</c>
            </summary>
            <param name="builder">The builder to convert</param>
            <returns>A new instance of the message group class</returns>
        </member>
        <member name="T:MassTransit.Services.Timeout.Messages.CancelTimeout">
            <summary>
            Used by the Timeout Service, cancels the scheduled timeout with the specified CorrelationId
            </summary>
        </member>
        <member name="P:MassTransit.Services.Timeout.Messages.TimeoutMessageBase.Tag">
            <summary>
            The tag associated with the timeout message
            This is mainly because we can't publish type-specific messages yet. 
            We really want to be able to schedule a timeout and specify a message type
            to publish on the timeout, but that is going to be tough to handle (period).
            </summary>
        </member>
        <member name="P:MassTransit.Services.Timeout.Messages.TimeoutMessageBase.TimeoutAt">
            <summary>
            The time (in UTC) when the timeout expires
            </summary>
        </member>
        <member name="P:MassTransit.Services.Timeout.Messages.TimeoutMessageBase.CorrelationId">
            <summary>
            The CorrelationId to use when publishing the timeout message
            </summary>
        </member>
        <member name="M:MassTransit.Services.HealthMonitoring.HealthClient.#ctor(System.Int32)">
            <summary>
            Constructs a new HealthClient object
            </summary>
            <param name="intervalInSeconds">The heartbeat interval in seconds</param>
        </member>
        <member name="M:MassTransit.IObjectBuilder.Release``1(``0)">
            <summary>
            Releases an object back to the container
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
        </member>
        <member name="T:MassTransit.UnsubscribeAction">
            <summary>
            The action to call to unsubscribe a previously subscribed consumer
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.UnregisterAction">
            <summary>
            The action to call to unregister a previously registered component
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IServiceBus">
            <summary>
            The base service bus interface
            </summary>
        </member>
        <member name="M:MassTransit.IServiceBus.Subscribe``1(System.Action{``0})">
            <summary>
            Adds a message handler to the service bus for handling a specific type of message
            </summary>
            <typeparam name="T">The message type to handle, often inferred from the callback specified</typeparam>
            <param name="callback">The callback to invoke when messages of the specified type arrive on the service bus</param>
        </member>
        <member name="M:MassTransit.IServiceBus.Subscribe``1(System.Action{``0},System.Predicate{``0})">
            <summary>
            Adds a message handler to the service bus for handling a specific type of message
            </summary>
            <typeparam name="T">The message type to handle, often inferred from the callback specified</typeparam>
            <param name="callback">The callback to invoke when messages of the specified type arrive on the service bus</param>
            <param name="condition">A condition predicate to filter which messages are handled by the callback</param>
        </member>
        <member name="M:MassTransit.IServiceBus.Subscribe``1(``0)">
            <summary>
            Connects any consumers for the component to the message dispatcher
            </summary>
            <typeparam name="T">The consumer type</typeparam>
            <param name="consumer">The component</param>
        </member>
        <member name="M:MassTransit.IServiceBus.Subscribe``1">
            <summary>
            Adds a component to the dispatcher that will be created on demand to handle messages
            </summary>
            <typeparam name="TConsumer">The type of the component to add</typeparam>
        </member>
        <member name="M:MassTransit.IServiceBus.Subscribe(System.Type)">
            <summary>
            Adds a component to the dispatcher that will be created on demand to handle messages
            </summary>
            <param name="consumerType">The type of component to add</param>
        </member>
        <member name="M:MassTransit.IServiceBus.SubscribeConsumer``1(System.Func{``0,System.Action{``0}})">
            <summary>
            Subscribe to a message that has a consumer that is retrieved from the specified expression
            </summary>
            <typeparam name="T"></typeparam>
            <param name="getConsumerAction"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IServiceBus.Publish``1(``0)">
            <summary>
            Publishes a message to all subscribed consumers for the message type
            </summary>
            <typeparam name="T">The type of the message</typeparam>
            <param name="message">The messages to be published</param>
        </member>
        <member name="M:MassTransit.IServiceBus.GetService``1">
            <summary>
            Returns the service for the requested interface if it was registered with the service bus
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="P:MassTransit.IServiceBus.Endpoint">
            <summary>
            The endpoint from which messages are received
            </summary>
        </member>
        <member name="P:MassTransit.IServiceBus.PoisonEndpoint">
            <summary>
            The poison endpoint associated with this instance where messages that cannot be processed are sent
            </summary>
        </member>
        <member name="M:MassTransit.Services.Subscriptions.Server.ISubscriptionRepository.Save(MassTransit.Services.Subscriptions.Subscription)">
            <summary>
            Add a new subscription to the repository for storage
            </summary>
        </member>
        <member name="M:MassTransit.Services.Subscriptions.Server.ISubscriptionRepository.Remove(MassTransit.Services.Subscriptions.Subscription)">
            <summary>
            Remove a subscription from the repository
            </summary>
        </member>
        <member name="M:MassTransit.Services.Subscriptions.Server.ISubscriptionRepository.List">
            <summary>
            Return a list of subscriptions stored in the repository
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.ServiceBus">
            <summary>
            A service bus is used to attach message handlers (services) to endpoints, as well as 
            communicate with other service bus instances in a distributed application
            </summary>
        </member>
        <member name="T:MassTransit.IControlBus">
            <summary>
            Extends the IServiceBus interface to include additional methods for
            services that extend the service bus
            </summary>
        </member>
        <member name="M:MassTransit.ServiceBus.#ctor(MassTransit.IEndpoint,MassTransit.IObjectBuilder,MassTransit.IEndpointFactory)">
            <summary>
            Creates an instance of the ServiceBus, which implements IServiceBus. This is normally
            not called and should be created using the ServiceBusConfigurator to ensure proper defaults 
            and operation.
            </summary>
        </member>
        <member name="M:MassTransit.ServiceBus.Publish``1(``0)">
            <summary>
            Publishes a message to all subscribed consumers for the message type
            </summary>
            <typeparam name="T">The type of the message</typeparam>
            <param name="message">The messages to be published</param>
        </member>
        <member name="M:MassTransit.ServiceBus.Subscribe``1(System.Action{``0})">
            <summary>
            Adds a message handler to the service bus for handling a specific type of message
            </summary>
            <typeparam name="T">The message type to handle, often inferred from the callback specified</typeparam>
            <param name="callback">The callback to invoke when messages of the specified type arrive on the service bus</param>
        </member>
        <member name="M:MassTransit.ServiceBus.Subscribe``1(System.Action{``0},System.Predicate{``0})">
            <summary>
            Adds a message handler to the service bus for handling a specific type of message
            </summary>
            <typeparam name="T">The message type to handle, often inferred from the callback specified</typeparam>
            <param name="callback">The callback to invoke when messages of the specified type arrive on the service bus</param>
            <param name="condition">A condition predicate to filter which messages are handled by the callback</param>
        </member>
        <member name="P:MassTransit.ServiceBus.Endpoint">
            <summary>
            The endpoint associated with this instance
            </summary>
        </member>
        <member name="P:MassTransit.ServiceBus.PoisonEndpoint">
            <summary>
            The poison endpoint associated with this instance where exception messages are sent
            </summary>
        </member>
        <member name="T:MassTransit.Util.CheckConvention">
            <summary>
            Check class for verifying the condition of items included in interface contracts
            </summary>
        </member>
        <member name="M:MassTransit.CurrentMessage.Respond``1(``0)">
            <summary>
            Respond to the current inbound message with either a send to the ResponseAddress or a
            Publish on the bus that received the message
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message">The message to send/publish</param>
        </member>
        <member name="M:MassTransit.CurrentMessage.GenerateFault``1(``0)">
            <summary>
            Send a fault to either via publishing or to the Fault Endpoint
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message">The message to send/publish</param>
        </member>
        <member name="M:MassTransit.CurrentMessage.Respond``1(``0,System.Action{MassTransit.Internal.IOutboundMessage})">
            <summary>
            Respond to the current inbound message with either a send to the ResponseAddress or a
            Publish on the bus that received the message
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message">The message to send/publish</param>
            <param name="contextAction">The action to setup the context on the outbound message</param>
        </member>
        <member name="M:MassTransit.CurrentMessage.RetryLater">
            <summary>
            Puts the message back on the input queue so that it can be processed again later
            </summary>
        </member>
        <member name="M:MassTransit.Pipeline.Configuration.Subscribers.PipelineSubscriberBase.FindMethod(System.Type,System.String,System.Type[],System.Type[])">
            <summary>
            Returns the method information for the requested type and arguments
            </summary>
            <param name="type"></param>
            <param name="methodName"></param>
            <param name="typeArguments"></param>
            <param name="parameterTypes"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Pipeline.IPipelineSink`1">
            <summary>
            Implemented by all classes that can be inserted into the pipeline
            </summary>
            <typeparam name="T">The message type passed by this sink</typeparam>
        </member>
        <member name="M:MassTransit.Pipeline.IPipelineSink`1.Enumerate(`0)">
            <summary>
            Passes a message through the pipeline returning all consumers for the message
            so that it can be dispatched to those consumers. The message does not actually dispatch
            in the pipeline, the consumers Consume method is called.
            </summary>
            <param name="item">The message being pushed through the pipeline</param>
            <returns>An enumerable of consumers for the message</returns>
        </member>
        <member name="M:MassTransit.Pipeline.IPipelineSink`1.Inspect(MassTransit.Pipeline.IPipelineInspector)">
            <summary>
            Walks the pipeline from the current sink forward, calling back to the inspector for each
            sink in the pipeline.
            NOTE: Visitor Pattern merit badge awarded
            </summary>
            <param name="inspector">The inspector to call back to for each sink</param>
            <returns>True if the inspection should continue, false to stop</returns>
        </member>
        <member name="T:MassTransit.Distributor.WorkerPendingMessageTracker`1">
            <summary>
            Keeps track of messages that were not accepted due to worker load in order to provide a pending message count
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.Distributor.WorkerSettings">
            <summary>
            These settings are used to configure a distributed consumer if the default
            settings are not sufficient.
            </summary>
        </member>
        <member name="P:MassTransit.Distributor.WorkerSettings.PendingLimit">
            <summary>
            A recommended limit of pending messages for this worker. This is not a hard limit,
            the queue depth may at times exceed this value.
            </summary>
        </member>
        <member name="P:MassTransit.Distributor.WorkerSettings.InProgressLimit">
            <summary>
            A recommended limit of concurrent messages being consumed by the worker. This too is not a hard
            limit, just a recommendation that will most likely be enforced but not guaranteed.
            </summary>
        </member>
        <member name="T:MassTransit.Distributor.Messages.Distributed`1">
            <summary>
            Wraps a message type as a distributed message so that it can be sent separately from the actual
            message being processed. We intentionally make sure it is not assignable to T, because we don't
            want it getting downgraded to a consumer of T.
            </summary>
            <typeparam name="T">The message type being distributed</typeparam>
        </member>
        <member name="M:MassTransit.Distributor.ExtensionsForDistributor.UseDistributorFor``1(MassTransit.Configuration.IServiceBusConfigurator,MassTransit.IEndpointFactory)">
            <summary>
            Implements a distributor-to-worker pattern for the given message type. 
            </summary>
            <typeparam name="T">The type of message to use the distributor</typeparam>
            <param name="configurator">Service bus to implement the distributor</param>
            <param name="endpointFactory">Factory to generate endpoints from a given URL</param>
        </member>
        <member name="M:MassTransit.Distributor.ExtensionsForDistributor.UseDistributorFor``2(MassTransit.Configuration.IServiceBusConfigurator,MassTransit.IEndpointFactory)">
            <summary>
            Implements a distributor-to-worker pattern for the given message type. 
            </summary>
            <typeparam name="T">The type of to use the distributor</typeparam>
            <typeparam name="K">The <code>IWorkerSelectionStrategy</code> used to pick 
            which worker node to send a message</typeparam>
            <param name="configurator">Service bus to implement the distributor</param>
            <param name="endpointFactory">Factory to generate endpoints from a given URL</param>
        </member>
        <member name="M:MassTransit.Distributor.ExtensionsForDistributor.UseDistributorFor``1(MassTransit.Configuration.IServiceBusConfigurator,MassTransit.IEndpointFactory,MassTransit.Distributor.IWorkerSelectionStrategy{``0})">
            <summary>
            Implements a distributor-to-worker pattern for the given message type. 
            </summary>
            <typeparam name="T">The type of to use the distributor</typeparam>
            <param name="configurator">Service bus to implement the distributor</param>
            <param name="endpointFactory">Factory to generate endpoints from a given URL</param>
            <param name="workerSelectionStrategy">The <code>IWorkerSelectionStrategy</code> 
            used to pick which worker node to send a message</param>
        </member>
        <member name="T:MassTransit.Distributor.Messages.WorkerAvailable`1">
            <summary>
            Published by workers that can process a message of type T
            </summary>
            <typeparam name="T">The type of message that can be processed.</typeparam>
        </member>
        <member name="T:MassTransit.Distributor.Messages.Workload`1">
            <summary>
            Presents the workload of a worker to interested consumers
            </summary>
            <typeparam name="T">The type of message being handled</typeparam>
        </member>
        <member name="P:MassTransit.Distributor.Messages.Workload`1.Pending">
            <summary>
            The number of messages pending for consumption by this worker
            </summary>
        </member>
        <member name="P:MassTransit.Distributor.Messages.Workload`1.PendingLimit">
            <summary>
            The maximum number of messages that should be pending for this worker in the queue
            </summary>
        </member>
        <member name="P:MassTransit.Distributor.Messages.Workload`1.InProgress">
            <summary>
            The number of messages currently being processed by this worker
            </summary>
        </member>
        <member name="P:MassTransit.Distributor.Messages.Workload`1.InProgressLimit">
            <summary>
            The maximum number of messages that can be processed at a time by this worker
            </summary>
        </member>
        <member name="P:MassTransit.IEndpointAddress.Uri">
            <summary>
            The URI used to access the endpoint
            </summary>
        </member>
        <member name="P:MassTransit.IEndpointAddress.IsLocal">
            <summary>
            True if the endpoint is local to this machine
            </summary>
        </member>
        <member name="T:MassTransit.FutureMessage`1">
            <summary>
            A simple class that helps to work with the async nature of messaging
            </summary>
            <remarks>
            http://www.ps.uni-sb.de/alice/manual/futures.html
            </remarks>
            <typeparam name="TMessage">The type of message being consumed</typeparam>
        </member>
        <member name="T:MassTransit.SelectedFutureMessage`1">
            <summary>
            A simple class that helps to work with the async nature of messaging
            </summary>
            <remarks>
            http://www.ps.uni-sb.de/alice/manual/futures.html
            </remarks>
            <typeparam name="TMessage">The type of message being consumed</typeparam>
        </member>
        <member name="T:MassTransit.FutureMessage`2">
            <summary>
            A simple class that helps to work with the async nature of messaging
            </summary>
            <remarks>
            http://www.ps.uni-sb.de/alice/manual/futures.html
            </remarks>
            <typeparam name="TMessage">The type of message being consumed</typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:MassTransit.Grid.Paxos.Accept`1">
            <summary>
            The accept is the phase 2a of Paxos
            </summary>
        </member>
        <member name="P:MassTransit.Grid.Paxos.PaxosMessageBase.BallotId">
            <summary>
            The proposal number for this prepare request
            </summary>
        </member>
        <member name="P:MassTransit.Grid.Paxos.PaxosMessageBase.CorrelationId">
            <summary>
            The key for this value, unique for each thing being synchronized
            </summary>
        </member>
        <member name="P:MassTransit.Grid.Paxos.PaxosMessageBase.LeaderId">
            <summary>
            The leader in use with this request
            </summary>
        </member>
        <member name="P:MassTransit.Grid.Paxos.Accept`1.Value">
            <summary>
            The value proposed for this key
            </summary>
        </member>
        <member name="T:MassTransit.Grid.Paxos.Accepted`1">
            <summary>
            Accepted is phase 2b of the Paxos algorithm
            </summary>
        </member>
        <member name="P:MassTransit.Grid.Paxos.PaxosValueMessageBase`1.ValueBallotId">
            <summary>
            The number that established with the current value
            </summary>
        </member>
        <member name="P:MassTransit.Grid.Paxos.PaxosValueMessageBase`1.Value">
            <summary>
            The last assigned value associated with this key
            </summary>
        </member>
        <member name="P:MassTransit.Grid.Paxos.Accepted`1.IsFinal">
            <summary>
            True if this is the final value (TODO is this right?)
            </summary>
        </member>
        <member name="M:MassTransit.Configuration.IServiceConfigurator.Create(MassTransit.IServiceBus,MassTransit.IObjectBuilder)">
            <summary>
            Creates the service
            </summary>
            <param name="bus"></param>
            <param name="builder"></param>
            <returns>The instance of the service</returns>
        </member>
        <member name="P:MassTransit.Configuration.IServiceConfigurator.ServiceType">
            <summary>
            Returns the type of the service created by the configurator
            </summary>
        </member>
        <member name="M:MassTransit.Grid.Configuration.IGridConfigurator.SetProposer">
            <summary>
            Specifies this node should be a proposer in the grid for jobs
            </summary>
        </member>
        <member name="T:MassTransit.Grid.Configuration.IGridServiceConfigurator`1">
            <summary>
            Used to configure a service on the grid. A service is a message that is handled by 
            some component. The grid will create a intercepter that actually consumes the message. 
            The intercepter will update some statistics, notify the other grid nodes of the activity,
            and then pass the message to the actual component for processing. When it is done, the 
            grid will report back the activity to the rest of the grid.
            </summary>
            <typeparam name="TService"></typeparam>
        </member>
        <member name="M:MassTransit.Grid.Configuration.IGridServiceConfigurator`1.Use``1">
            <summary>
            Use the component for processing the message for this service
            </summary>
            <typeparam name="TComponent"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Grid.IGridControl.AcceptMessage(System.Guid,System.Guid)">
            <summary>
            Indicates whether this grid node should accept the message from the endpoint
            </summary>
            <param name="serviceId"></param>
            <param name="correlationId"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Grid.IGridControl.ConsumeMessage(System.Guid,System.Guid)">
            <summary>
            Indicates whether this grid node should consume the message
            </summary>
            <param name="serviceId"></param>
            <param name="correlationId"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Grid.IGridControl.NotifyMessageComplete(System.Guid)">
            <summary>
            Notifies the grid that a message was consumed. The grid will then update the GridMessageNode saga instance
            to reflect the completion of the message processing.
            </summary>
            <param name="correlationId"></param>
        </member>
        <member name="T:MassTransit.Internal.IEndpointManagement">
            <summary>
            Provides a management interface to an endpoint
            Since this has more than one method, these may get broken up
            into individual interfaces such as ICreateEndpoint, ICountEndpoint, etc.
            </summary>
        </member>
        <member name="M:MassTransit.Internal.IEndpointManagement.Create(System.Boolean)">
            <summary>
            Creates the endpoint if it does not exist using the specified transaction mode
            </summary>
            <param name="transactional"></param>
        </member>
        <member name="M:MassTransit.Internal.IEndpointManagement.Count">
            <summary>
            Returns the number of messages waiting to be received on the endpoint
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Internal.IEndpointManagement.Count(System.Int64)">
            <summary>
            Returns the number of messages waiting to be received or the limit if the limit is received
            </summary>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Internal.IEndpointManagement.Purge">
            <summary>
            Purge all messages from the endpoint
            </summary>
        </member>
        <member name="P:MassTransit.Internal.IEndpointManagement.Exists">
            <summary>
            Returns true if the endpoint exists
            </summary>
        </member>
        <member name="P:MassTransit.Internal.IEndpointManagement.IsTransactional">
            <summary>
            Returns true if the endpoint supports transactions
            </summary>
        </member>
        <member name="M:MassTransit.Parallel.ITask`4.Map(`0)">
            <summary>
            Maps an input argument into a series of subtasks for processing
            </summary>
            <param name="argument"></param>
            <returns>An enumeration of subtasks to be processed</returns>
        </member>
        <member name="T:MassTransit.Grid.Paxos.Prepare`1">
            <summary>
            The prepare is phase 1a of the Paxos algorithm
            </summary>
        </member>
        <member name="T:MassTransit.Grid.Paxos.PrepareRejected`1">
            <summary>
            When a prepare isn't accepted by an acceptor, this is sent to the proposer
            </summary>
        </member>
        <member name="T:MassTransit.Grid.Paxos.Promise`1">
            <summary>
            The promise is phase 1b of the Paxos algorithm
            </summary>
        </member>
        <member name="T:MassTransit.Internal.IUnsubscribeAction">
            <summary>
            Used to wrap an UnsubscribeAction in a disposable block
            </summary>
        </member>
        <member name="M:MassTransit.Internal.IUnsubscribeAction.Add(MassTransit.UnsubscribeAction)">
            <summary>
            Add additional actions to the unsubscribe action
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:MassTransit.Internal.IMessageHeaders">
            <summary>
            Shared context between inbound and outbound messages
            </summary>
        </member>
        <member name="P:MassTransit.Internal.IMessageHeaders.DestinationAddress">
            <summary>
            The address to which the message was originally sent
            </summary>
        </member>
        <member name="P:MassTransit.Internal.IMessageHeaders.ResponseAddress">
            <summary>
            The address where responses to this message should be sent
            </summary>
        </member>
        <member name="P:MassTransit.Internal.IMessageHeaders.FaultAddress">
            <summary>
            The address where faults generated by consumers of this message should be sent
            </summary>
        </member>
        <member name="P:MassTransit.Internal.IMessageHeaders.SourceAddress">
            <summary>
            The address from which this message originated
            </summary>
        </member>
        <member name="P:MassTransit.Internal.IMessageHeaders.RetryCount">
            <summary>
            The number of times this message has been delivered to the consumer
            </summary>
        </member>
        <member name="P:MassTransit.Internal.IMessageHeaders.ExpirationTime">
            <summary>
            The expiration time of the message, if set, otherwise null
            </summary>
        </member>
        <member name="P:MassTransit.Internal.IMessageHeaders.MessageType">
            <summary>
            The type of the message in FullName, Assembly format
            </summary>
        </member>
        <member name="T:MassTransit.Internal.ISetMessageHeaders">
            <summary>
            Used to set the message headers
            </summary>
        </member>
        <member name="T:MassTransit.Configuration.IEndpointFactoryConfigurator">
            <summary>
            Allows for the configuration of the EndpointFactory through the use of an EndpointFactoryConfigurator
            </summary>
        </member>
        <member name="M:MassTransit.Configuration.IEndpointFactoryConfigurator.SetObjectBuilder(MassTransit.IObjectBuilder)">
            <summary>
            Sets the object builder to use when creating objects. Also passed to endpoints when they are created.
            </summary>
            <param name="objectBuilder">An initialized instance of the object builder</param>
        </member>
        <member name="M:MassTransit.Configuration.IEndpointFactoryConfigurator.SetDefaultSerializer``1">
            <summary>
            Sets the default serializer for the endpoints (current default is BinaryMessageSerializer)
            </summary>
            <typeparam name="TSerializer">The class to use for serialization</typeparam>
        </member>
        <member name="M:MassTransit.Configuration.IEndpointFactoryConfigurator.SetDefaultSerializer(System.Type)">
            <summary>
            Sets the default serializer for the endpoints (current default is BinaryMessageSerializer)
            </summary>
        </member>
        <member name="M:MassTransit.Configuration.IEndpointFactoryConfigurator.RegisterTransport``1">
            <summary>
            Register a transport so that it can be used to build endpoints for supported Uris
            </summary>
            <typeparam name="T">The class supporting the ConfigureEndpoint method</typeparam>
        </member>
        <member name="M:MassTransit.Configuration.IEndpointFactoryConfigurator.RegisterTransport(System.Type)">
            <summary>
            Register a transport so that it can be used to build endpoints for supported Uris
            </summary>
            <param name="transportType">The type supporting the ConfigureEndpoint method</param>
        </member>
        <member name="M:MassTransit.Configuration.IEndpointFactoryConfigurator.ConfigureEndpoint(System.String,System.Action{MassTransit.Configuration.IEndpointConfigurator})">
            <summary>
            Specifies a configuration action to perform on a particular endpoint when it is created.
            </summary>
            <param name="uriString">The Uri to be configured (matching is case insensitive)</param>
            <param name="action">The action to perform when the transport for the endpoint is created.</param>
        </member>
        <member name="M:MassTransit.Configuration.IEndpointFactoryConfigurator.ConfigureEndpoint(System.Uri,System.Action{MassTransit.Configuration.IEndpointConfigurator})">
            <summary>
            Specifies a configuration action to perform on a particular endpoint when it is created.
            </summary>
            <param name="uri">The Uri to be configured</param>
            <param name="action">The action to perform when the transport for the endpoint is created.</param>
        </member>
        <member name="T:MassTransit.Pipeline.Inspectors.PipelineInspectorBase`1">
            <summary>
            Base class for pipeline inspectors
            </summary>
        </member>
        <member name="T:MassTransit.Saga.ISagaPolicy`2">
            <summary>
            A saga policy defines how the pipeline should handle messages when being routed 
            to the saga. Checks are made for the existence of a saga, whether the message should
            create a new saga, or otherwise
            </summary>
            <typeparam name="TSaga">The saga that will handle the message</typeparam>
            <typeparam name="TMessage">The message that will be handled by the saga</typeparam>
        </member>
        <member name="M:MassTransit.Saga.ISagaPolicy`2.CreateSagaWhenMissing(`1,`0@)">
            <summary>
            Determines if the message should result in the creation of a new instance of the saga
            </summary>
            <param name="message">The message that triggered the action</param>
            <param name="saga">The saga that was created</param>
            <returns>True if the saga should be created, otherwise false</returns>
        </member>
        <member name="M:MassTransit.Saga.ISagaPolicy`2.ForExistingSaga(`1)">
            <summary>
            Called when an instance of the saga associated with the message already exists
            </summary>
            <param name="message">The message to correlate to the saga</param>
        </member>
        <member name="M:MassTransit.Saga.ISagaPolicy`2.ForMissingSaga(`1)">
            <summary>
            Called when there are no matching instances of the saga available
            </summary>
            <param name="message">The message to correlate to the saga</param>
        </member>
        <member name="M:MassTransit.Saga.ISagaPolicy`2.ShouldSagaBeRemoved(`0)">
            <summary>
            Checks to see if the saga should be removed based on the current state
            </summary>
            <param name="saga"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Serialization.Custom.ISerializerContext">
            <summary>
            The serializer context is passed through all of the serializers to provide a central context for
            dispatching to the appropriate serializer for each type encountered without using a static class
            </summary>
        </member>
        <member name="M:MassTransit.Serialization.Custom.ISerializerContext.GetPrefix(System.String,System.String)">
            <summary>
            Returns the namespace prefix to use for the specified element
            </summary>
            <param name="localName">The name of the element being added to the XML document</param>
            <param name="ns">The namespace that defines the type for the element</param>
            <returns>A prefix to use when writing the element to the XML stream</returns>
        </member>
        <member name="M:MassTransit.Serialization.Custom.ISerializerContext.MapType(System.Type,System.Type,System.Object)">
            <summary>
            Returns the type for a property if the property type is to be overridden by the serializer
            </summary>
            <param name="declaringType">The type containing the property</param>
            <param name="propertyType">The type of the property</param>
            <param name="value">The value to use to obtain the type, if necessary</param>
            <returns>The property type, or the overriding type</returns>
        </member>
        <member name="M:MassTransit.Serialization.Custom.ISerializerContext.WriteNamespaceInformationToXml(System.Xml.XmlWriter)">
            <summary>
            Writes any namespace information that was collected to the document element attribute
            </summary>
            <param name="writer">The XmlWriter to use for writing the attributes</param>
        </member>
        <member name="M:MassTransit.Serialization.Custom.ISerializerContext.SerializeObject(System.String,System.Type,System.Object)">
            <summary>
            Delegates the serialization of an obj
            </summary>
            <param name="localName">The name of the element in the XML document</param>
            <param name="type">The type of object to serialize</param>
            <param name="value">The actual object to serialize</param>
            <returns>An enumeration of continuations to actually write the XML</returns>
        </member>
        <member name="T:MassTransit.Serialization.IMessageSerializer">
            <summary>
            Message Serialization Methods 
            </summary>
        </member>
        <member name="M:MassTransit.Serialization.IMessageSerializer.Serialize``1(System.IO.Stream,``0)">
            <summary>
            Serialize the message to the stream
            </summary>
            <typeparam name="T">The implicit type of the message to serialize</typeparam>
            <param name="output">The stream where the output should be directed</param>
            <param name="message">The message to serialize</param>
        </member>
        <member name="M:MassTransit.Serialization.IMessageSerializer.Deserialize(System.IO.Stream)">
            <summary>
            Deserialize a message from the stream
            </summary>
            <param name="input">The input stream where the serializer should read from</param>
            <returns>An object that was deserialized</returns>
        </member>
        <member name="P:MassTransit.Transports.CreateEndpointSettings.Address">
            <summary>
            The address of the endpoint
            </summary>
        </member>
        <member name="P:MassTransit.Transports.CreateEndpointSettings.ErrorAddress">
            <summary>
            The address of the endpoint where invalid messages should be moved
            </summary>
        </member>
        <member name="P:MassTransit.Transports.CreateEndpointSettings.Serializer">
            <summary>
            The serializer to use for messages on the endpoint
            </summary>
        </member>
        <member name="T:MassTransit.Services.Subscriptions.Server.SubscriptionSaga">
            <summary>
            Manages the lifecycle of a subscription through the system
            </summary>
        </member>
        <member name="T:MassTransit.Internal.ISubscriptionEvent">
            <summary>
            Notifies when changes to the subscribed message types changes in the pipeline
            </summary>
        </member>
        <member name="M:MassTransit.Services.Subscriptions.SubscriptionPublisher.#ctor(MassTransit.Services.Subscriptions.ISubscriptionService)">
            <summary>
            Publishes subscription events to the ISubscriptionService
            </summary>
            <param name="service">The service that is handling the event subscriptions</param>
        </member>
        <member name="T:MassTransit.IEndpointFactory">
            <summary>
            The endpoint factory methods used to retrieve objects implementing IEndpoint from Uris
            </summary>
        </member>
        <member name="M:MassTransit.IEndpointFactory.GetEndpoint(System.String)">
            <summary>
            Returns an IEndpoint for the Uri string specified. If the endpoint has not yet been created,
            the factory will attempt to create an endpoint for the Uri string.
            </summary>
            <param name="uriString">The Uri string to resolve to an endpoint (will be checked for valid Uri syntax)</param>
            <returns>An IEndpoint instance</returns>
        </member>
        <member name="M:MassTransit.IEndpointFactory.GetEndpoint(System.Uri)">
            <summary>
            Returns an IEndpoint for the Uri specified. If the endpoint has not yet been created,
            the factory will attempt to create an endpoint for the Uri.
            </summary>
            <param name="uri">The Uri to resolve to an endpoint</param>
            <returns>An IEndpoint instance</returns>
        </member>
        <member name="T:MassTransit.Configuration.IServiceBusConfigurator">
            <summary>
            Enables the configuration of the service bus when it is being created
            </summary>
        </member>
        <member name="T:MassTransit.Configuration.IServiceBusConfiguratorDefaults">
            <summary>
            Enables the configuration of items that can be shared between multiple ServiceBus instances
            </summary>
        </member>
        <member name="M:MassTransit.Configuration.IServiceBusConfiguratorDefaults.SetObjectBuilder(MassTransit.IObjectBuilder)">
            <summary>
            Specify the IObjectBuilder to use when creating objects
            </summary>
            <param name="objectBuilder"></param>
        </member>
        <member name="M:MassTransit.Configuration.IServiceBusConfiguratorDefaults.SendErrorsTo(System.String)">
            <summary>
            Specify the endpoint where errors should be sent
            </summary>
            <param name="uriString">The Uri of the endpoint</param>
        </member>
        <member name="M:MassTransit.Configuration.IServiceBusConfiguratorDefaults.SendErrorsTo(System.Uri)">
            <summary>
            Specify the endpoint where errors should be sent
            </summary>
            <param name="uri">The Uri of the endpoint</param>
        </member>
        <member name="M:MassTransit.Configuration.IServiceBusConfiguratorDefaults.EnableAutoSubscribe">
            <summary>
            Enable the automatic subscription feature to subscribe all consumers found using the object builder
            </summary>
        </member>
        <member name="M:MassTransit.Configuration.IServiceBusConfiguratorDefaults.DisableAutoStart">
            <summary>
            Do not start the ServiceBus when it is created
            </summary>
        </member>
        <member name="M:MassTransit.Configuration.IServiceBusConfiguratorDefaults.SetReceiveTimeout(System.TimeSpan)">
            <summary>
            Set the default receive timeout for newly created buses
            This is nice to set lower for quicker running tests
            </summary>
            <param name="receiveTimeout"></param>
        </member>
        <member name="M:MassTransit.Configuration.IServiceBusConfiguratorDefaults.SetConcurrentConsumerLimit(System.Int32)">
            <summary>
            Set the maximum number of concurrent consumers that can be active at any time. For consumers
            performing high-latency, low-CPU operations, settings this number higher may increase throughput.
            </summary>
            <param name="concurrentConsumerLimit"></param>
        </member>
        <member name="M:MassTransit.Configuration.IServiceBusConfiguratorDefaults.SetConcurrentReceiverLimit(System.Int32)">
            <summary>
            Set the maximum number of concurrent threads that are receiving messages from the endpoint.
            In most cases, this can be left at the default value of 1, but can be increased when using
            transactional queues.
            </summary>
            <param name="concurrentReceiverLimit"></param>
        </member>
        <member name="M:MassTransit.Configuration.IServiceBusConfigurator.ReceiveFrom(System.String)">
            <summary>
            Specify the endpoint from which messages should be read
            </summary>
            <param name="uriString">The uri of the endpoint</param>
        </member>
        <member name="M:MassTransit.Configuration.IServiceBusConfigurator.ReceiveFrom(System.Uri)">
            <summary>
            Specify the endpoint from which messages should be read
            </summary>
            <param name="uri">The uri of the endpoint</param>
        </member>
        <member name="M:MassTransit.Configuration.IServiceBusConfigurator.ConfigureService``1(System.Action{``0})">
            <summary>
            Configure a service for use by the service bus
            </summary>
        </member>
        <member name="M:MassTransit.Configuration.IServiceBusConfigurator.AddService``1">
            <summary>
            Adds a service for use by the service bus with the default configuration
            </summary>
        </member>
        <member name="M:MassTransit.Configuration.IServiceBusConfigurator.PurgeBeforeStarting">
            <summary>
            Sets the endpoint to be purged before starting the service bus
            </summary>
        </member>
        <member name="M:MassTransit.Configuration.IServiceBusConfigurator.UseControlBus(MassTransit.IControlBus)">
            <summary>
            Specifies a control bus for the service bus
            </summary>
            <param name="bus">The bus instance to use as the control bus</param>
        </member>
        <member name="M:MassTransit.Configuration.IServiceBusConfigurator.BeforeConsumingMessage(System.Action)">
            <summary>
            Specifies an action to call before a message is consumed
            </summary>
            <param name="beforeConsume"></param>
        </member>
        <member name="M:MassTransit.Configuration.IServiceBusConfigurator.AfterConsumingMessage(System.Action)">
            <summary>
            Specifies an action to call after a message is consumed
            </summary>
            <param name="afterConsume"></param>
        </member>
        <member name="T:MassTransit.Internal.IMessageSelector">
            <summary>
            Used by consumers of endpoints to select messages to receive
            </summary>
        </member>
        <member name="M:MassTransit.Internal.IMessageSelector.AcceptMessage">
            <summary>
            Called to accept the message contained in this selector. Returns true if the
            messages was still available.
            </summary>
            <returns>True if the message could be accepted, otherwise false.</returns>
        </member>
        <member name="M:MassTransit.Internal.IMessageSelector.MoveMessageTo(MassTransit.IEndpoint)">
            <summary>
            Moves the message to the specified endpoint
            </summary>
            <param name="endpoint"></param>
        </member>
        <member name="M:MassTransit.Internal.IMessageSelector.DeserializeMessage">
            <summary>
            Deserialize the message and return the message object
            </summary>
            <returns>The message object</returns>
        </member>
        <member name="T:MassTransit.Serialization.MessageEnvelopeBase">
            <summary>
            A base message envelope for transports that support enveloped messages
            This does not include the binary formatter, since it is retained for
            legacy support as a pure object formatter with no envelope
            </summary>
        </member>
        <member name="P:MassTransit.Serialization.MessageEnvelopeBase.SourceAddress">
            <summary>
            The source where the message originated
            </summary>
        </member>
        <member name="P:MassTransit.Serialization.MessageEnvelopeBase.DestinationAddress">
            <summary>
            The destination where the message was originally sent
            </summary>
        </member>
        <member name="P:MassTransit.Serialization.MessageEnvelopeBase.MessageId">
            <summary>
            A transport specific message identifier if appropriate
            </summary>
        </member>
        <member name="P:MassTransit.Serialization.MessageEnvelopeBase.ConversationId">
            <summary>
            A higher-level conversation identifier that goes above any type of saga or request/response
            </summary>
        </member>
        <member name="P:MassTransit.Serialization.MessageEnvelopeBase.CorrelationId">
            <summary>
            A correlation identifier for the message, if a saga or correlated message
            </summary>
        </member>
        <member name="P:MassTransit.Serialization.MessageEnvelopeBase.ResponseAddress">
            <summary>
            The destination to use for replies to this message
            </summary>
        </member>
        <member name="P:MassTransit.Serialization.MessageEnvelopeBase.FaultAddress">
            <summary>
            The destination to send any faults caused by this message
            If not specified, faults are either sent to the ResponseAddress address
            If this nor ResponseAddress is specified, faults are published
            </summary>
        </member>
        <member name="P:MassTransit.Serialization.MessageEnvelopeBase.RetryCount">
            <summary>
            The number of times the message has been retried by a consumer
            Starts at zero and is incremented every time the message is scheduled for retry
            </summary>
        </member>
        <member name="P:MassTransit.Serialization.MessageEnvelopeBase.ExpirationTime">
            <summary>
            The message envelope base for the binary serializer?
            </summary>
        </member>
        <member name="P:MassTransit.Serialization.MessageEnvelopeBase.MessageType">
            <summary>
            The type of the message, including the full name and assembly
            </summary>
        </member>
        <member name="M:MassTransit.ExtensionsToServiceBus.MakeRequest(MassTransit.IServiceBus,System.Action{MassTransit.IServiceBus})">
            <summary>
            Make a request to a service and wait for the response to be received, built
            using a fluent interface with a final call to Send()
            </summary>
            <param name="bus"></param>
            <param name="requestAction"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Pipeline.Sinks.CorrelatedMessageSinkRouter`2">
            <summary>
            Routes a message to all of the connected message sinks without modification
            </summary>
            <typeparam name="TMessage">The type of the message to be routed</typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Sinks.MessageRouter`1">
            <summary>
            Routes a message to all of the connected message sinks without modification
            </summary>
            <typeparam name="TMessage">The type of the message to be routed</typeparam>
        </member>
        <member name="M:MassTransit.Pipeline.Sinks.MessageRouter`1.Connect(MassTransit.Pipeline.IPipelineSink{`0})">
            <summary>
            Connects a message sink to the router
            </summary>
            <param name="sink">The sink to be connected</param>
            <returns>A function to disconnect the sink from the router</returns>
        </member>
        <member name="T:MassTransit.Batch.Pipeline.BatchMessageRouter`2">
            <summary>
            Dispatches batch messages to the appropriate consumers
            </summary>
            <typeparam name="TMessage">The type of the message to be routed</typeparam>
            <typeparam name="TBatchId">The type of the batch id</typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Sinks.ComponentMessageSink`2">
            <summary>
            Routes messages to instances of subscribed components. A new instance of the component
            is created from the container for each message received.
            </summary>
            <typeparam name="TComponent">The component type to handle the message</typeparam>
            <typeparam name="TMessage">The message to handle</typeparam>
        </member>
        <member name="T:MassTransit.Util.IRegistrationList`1">
            <summary>
            Supports the registration of items into a collection for the purpose of easy
            removal via lambda functions
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.Util.IRegistrationList`1.Register(`0)">
            <summary>
            Register a new interceptor at the front of the list. New intercepters are always
            inserted at the start of the list, so they should be added from least to most specific 
            order to avoid improper handling of message.
            </summary>
            <param name="item">The intercept to insert in the list</param>
            <returns>The unregister function, which should be called to remove the interceptor</returns>
        </member>
        <member name="M:MassTransit.Util.IRegistrationList`1.Each(System.Action{`0})">
            <summary>
            Enumerate the interceptors
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:MassTransit.Util.RegistrationList`1">
            <summary>
            A locked list implementation of IRegistrationList
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.Pipeline.MessagePipelineExtensions.Dispatch(MassTransit.Pipeline.IMessagePipeline,System.Object)">
            <summary>
            Dispatch a message through the pipeline
            </summary>
            <param name="pipeline">The pipeline instance</param>
            <param name="message">The message to dispatch</param>
        </member>
        <member name="M:MassTransit.Pipeline.MessagePipelineExtensions.Dispatch(MassTransit.Pipeline.IMessagePipeline,System.Object,System.Func{System.Object,System.Boolean})">
            <summary>
            Dispatch a message through the pipeline. If the message will be consumed, the accept function
            is called to allow the endpoint to acknowledge the message reception if applicable
            </summary>
            <param name="pipeline">The pipeline instance</param>
            <param name="message">The message to dispatch</param>
            <param name="acknowledge">The function to call if the message will be consumed by the pipeline</param>
        </member>
        <member name="M:MassTransit.Pipeline.MessagePipelineExtensions.Subscribe``1(MassTransit.Pipeline.IMessagePipeline)">
            <summary>
            Subscribe a component type to the pipeline that is resolved from the container for each message
            </summary>
            <typeparam name="TComponent"></typeparam>
            <param name="pipeline">The pipeline to configure</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Pipeline.MessagePipelineExtensions.Subscribe``1(MassTransit.Pipeline.IMessagePipeline,``0)">
            <summary>
            Subscribe a component to the pipeline that handles every message
            </summary>
            <typeparam name="TComponent"></typeparam>
            <param name="pipeline">The pipeline to configure</param>
            <param name="instance">The instance that will handle the messages</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Pipeline.Sinks.CorrelatedMessageRouter`2">
            <summary>
            Splits a message path based on the correlation information in the message
            </summary>
            <typeparam name="TMessage">The type of the message to be routed</typeparam>
            <typeparam name="TKey">They key type for the message</typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Sinks.EndpointMessageSink`1">
            <summary>
            A message sink that sends to an endpoint
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Sinks.SelectedComponentMessageSink`2">
            <summary>
            Routes messages to instances of subscribed components. A new instance of the component
            is created from the container for each message received.
            </summary>
            <typeparam name="TComponent">The component type to handle the message</typeparam>
            <typeparam name="TMessage">The message to handle</typeparam>
        </member>
        <member name="T:MassTransit.Serialization.BinaryMessageSerializer">
            <summary>
            The binary message serializer used the .NET BinaryFormatter to serialize
            message content. 
            </summary>
        </member>
        <member name="T:MassTransit.Serialization.XmlMessageEnvelope">
            <summary>
            The envelope that is used to wrap messages serialized using Xml
            </summary>
        </member>
        <member name="T:MassTransit.Serialization.DotNotXmlMessageSerializer">
            <summary>
            Serializes messages using the .NET Xml Serializer
            As such, limitations of that serializer apply to this one
            </summary>
        </member>
        <member name="T:MassTransit.Serialization.XmlReceiveMessageEnvelope">
            <summary>
            The class used to deserialize a message serialized in Xml
            Used since we don't know the type of the message until after the
            MessageType property has been evaluated
            </summary>
        </member>
    </members>
</doc>
